@startuml

abstract class ViewModel::ViewModelBase <extends INotifyPropertyChanged> {
 #ViewModelBase: void
 #OnPropertyChanged(string propertyName) : void
 ..events..
 +PropertyChanged: PropertyChangedEventHandler
}

class ViewModel::DelegateCommand <extends ICommand> {
 -_execute: Action<Object>
 -_canExecute: Func<Object, Boolean>
 --
 +DelegateCommand(Action<Object> execute) : void
 +DelegateCommand(Func<Object, Boolean> canExecute, Action<Object> execute) : void
 +CanExecute(Object? parameter): bool
 +Execute(Object? parameter) : void
 +RaiseCanExecuteChanged() : void
 ..events..
 +CanExecuteChanged: EventHandler
}

class ViewModel::MillField <extends ViewModel::ViewModelBase> {
 -_player: int
 --Properties--
 +Player : int
 +Number: int
 +StepCommand: DelegateCommand
}

class ViewModel::MillViewModel <extends ViewModel::ViewModelBase> {
 -_model: MillGameModel
--Properties--
+NewGameCommand: DelegateCommand
+LoadGameCommand: DelegateCommand
+SaveGameCommand: DelegateCommand
+ExitCommand: DelegateCommand
+Fields: ObservableCollection<MillField>
+CurrentPlayer: String
+CurrentAction: String
+Player1Talon: int
+Player2Talon: int
..events..
+NewGame: EventHandler
+LoadGame: EventHandler
+ExitGame: EventHandler
+SaveGame: EventHandler
--
+MillViewModel(MillGameModel model) : void
-RefreshTable(): void
-StepGame(int index): void
-Model_GameAdvanced(object? sender, MillEventArgs e): void
-Model_PlayerHasToPass(object? sender, PassingEventArgs e): void
-Model_GameOver(object? sender, MillEventArgs e): void
-Model_GameCreated(object? sender, MillEventArgs e): void
- OnNewGame(): void
-OnLoadGame(): void
-OnSaveGame(): void
-OnExitGame(): void
}

ViewModel::MillViewModel *.. ViewModel::MillField
ViewModel::MillField *.. ViewModel::DelegateCommand
@enduml